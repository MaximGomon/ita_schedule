@model UserViewModel
@using ITA.Schedule.Models
@{AlertsMessege alert = ViewBag.AlertsMessege;}
@{Layout = null;}

<!DOCTYPE html>

<html lang="en">
<head>
    <meta name="viewport" content="width=device-width" />
    <title>Authorization</title>
    
    <link href="~/Content/bootstrap.min.css" rel="stylesheet" />

    <!--<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-alpha.6/css/bootstrap.min.css" 
          integrity="sha384-rwoIResjU2yc3z8GV/NPeZWAv56rSmLldC3R/AZzGRnGxQQKnKkoFVhFQhNUwEyJ" crossorigin="anonymous">
    
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-alpha.6/js/bootstrap.min.js"
            integrity="sha384-vBWWzlZJ8ea9aCX4pEW3rVHjgjt7zpkNpZk+02D9phzyeVkE+jo0ieGizqPLForn" crossorigin="anonymous"></script>

    <!-- download later 
    <link href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css" rel="stylesheet" />-->

    <style>
        body {
            background-color: #4B75A4;
        }

        hr {
            border-color: #ddd;
        }

        .card-header {
            margin: 0;
        }

        .padding-top-bottom-0 {
            padding-top: 0;
            padding-bottom: 0;
        }

        .margin-top-bottom-0 {
            margin-top: 0;
            margin-bottom: 0;
        }

        .margin-0 {
            margin: 0;
        }

        .padding-0 {
            padding: 0;
        }

        .padding_25 {
            padding: 25px;
        }

        .height-100 {
            height: 100%;
        }

        .collapse-content {
            padding: 25px;
            background-color: #4B75A4;
            border: 0;
        }

        .no-border {
            border: 0;
        }

        .blockquote {
            border-color: #777;
        }

        .card {
            border: 1px solid #777;
            border-radius: 0;
        }

        .card-header {
            border: 1px solid #444;
            border-radius: 0;
            background-color: #444;
            color: white;
        }

        .card-header:first-child {
            border: 1px solid #444;
            border-radius: 0;
        }

        .btn {
            border-radius: 0;
        }

        .form-control {
            border-radius: 0;
        }
        .input-group-addon {
            /*width: 100px;*/
            border-radius: 0;
        }
        select.form-control:not([size]):not([multiple]) {
            height: 100%;
        }
        .modal-header {
            background-color: #444;
            color: white;
        }
        .modal-content {
            border-radius: 0;
            box-shadow: none;
        }
        .alert{
            border-radius: 0;
        }
        .form-control {
            /*width: 100%;*/
        }
    </style>
</head>
<body>

    <div class="modal-dialog" role="document" style="margin-top: 10%">

        <!-- Alert -->
        <div id="AleartConteinerLogin">

            @{
                if (alert != null)
                {
                    <div class="alert @alert.ClassNames[(int) alert.Status]" role="alert">
                        <strong>@alert.Tittle</strong> @alert.Text
                    </div>
                }
            }

        </div>
        <!--end Alert -->

        <div class="modal-content">

                   
            <div class="tab-content">

                <div class="tab-pane active" id="login" role="tabpanel" style="">

                    <div class="modal-header">
                        <h3 class="margin-0">Login</h3>
                    </div>

                    <div class="modal-body">

                        <div data-toggle="validator" role="form" id="login-form">

                            @using (Html.BeginForm("Login", "Home", FormMethod.Post))
                            {

                                <div class="form-group">
                                    <div class="input-group">
                                        @Html.LabelFor(x => x.Email, new { @class = "input-group-addon" })
                                        @Html.TextBoxFor(x => x.Email, new { @class = "form-control", @placeholder = "YourEmail@gmail.com", @type = "email" })
                                    </div>
                                    @Html.ValidationMessageFor(x => x.Email, null, new { @class = "help-block" })
                                </div>

                                <div class="form-group">
                                    <div class="input-group">
                                        @Html.LabelFor(x => x.Password, new { @class = "input-group-addon" })
                                        @Html.TextBoxFor(x => x.Password, new { @class = "form-control", @placeholder = "Enter your password", @type = "password" })
                                    </div>
                                    @Html.ValidationMessageFor(x => x.Password, null, new { @class = "help-block" })
                                </div>

                                <div class="inline">
                                    <input class="btn btn-primary" type="submit" value="Login" />
                                    <a href="#" style="margin-left: 15px">Forgot your password?</a>
                                    <a data-toggle="tab" href="#profile" role="tab" style="margin-left: 15px">Not registered yet?</a>
                                </div>

                            }

                        </div>

                    </div>

                    </div>



                <div class="tab-pane" id="profile" role="tabpanel">

                    <div class="modal-header">
                        <h3 class="margin-0">Registration</h3>
                    </div>

                    <div class="modal-body">
                        
                        <div data-toggle="validator" role="form" id="Register-form">
                            
                            @using (Html.BeginForm("Register", "Home", FormMethod.Post))
                            {

                                <div class="form-group">
                                    <div class="input-group">
                                        @Html.LabelFor(x => x.FirstName, new { @class = "input-group-addon"})
                                        @Html.TextBoxFor(x => x.FirstName, new { @class = "form-control", @placeholder = "First Name", @type = "text" })
                                    </div>
                                    @Html.ValidationMessageFor(x => x.FirstName, null, new { @class = "help-block" })
                                </div>

                                <div class="form-group">
                                    <div class="input-group">
                                        @Html.LabelFor(x => x.LastName, new { @class = "input-group-addon"})
                                        @Html.TextBoxFor(x => x.LastName, new { @class = "form-control", @placeholder = "Last Name", @type = "text" })
                                    </div>
                                    @Html.ValidationMessageFor(x => x.LastName, null, new { @class = "help-block" })
                                </div>

                                <div class="form-group">
                                    <div class="input-group">
                                        @Html.LabelFor(x => x.Email, new { @class = "input-group-addon" })
                                        @Html.TextBoxFor(x => x.Email, new { @class = "form-control", @placeholder = "YourEmail@gmail.com", @type = "email" })
                                    </div>
                                    @Html.ValidationMessageFor(x => x.Email, null, new { @class = "help-block" })
                                </div>

                                <div class="form-group">
                                    <div class="input-group">
                                        @Html.LabelFor(x => x.Password, new { @class = "input-group-addon" })
                                        @Html.TextBoxFor(x => x.Password, new { @class = "form-control", @placeholder = "Password", @type = "password" })
                                    </div>
                                    @Html.ValidationMessageFor(x => x.Password, null, new { @class = "help-block" })
                                </div>

                                <div class="form-group">
                                    <div class="input-group">
                                        @Html.LabelFor(x => x.Role, new { @class = "input-group-addon" })
                                        @Html.EnumDropDownListFor(x => x.Role, new { @class = "form-control" })
                                    </div>
                                    @Html.ValidationMessageFor(x => x.Role, null, new { @class = "help-block" })
                                </div>

                                <div class="inline">
                                    <button class="btn btn-primary" type="submit">Register</button>
                                    <a class="nav-link " data-toggle="tab" href="#login" role="tab" style="margin-left: 15px">Already registered?</a>
                                </div>

                            }
                        </div>

                    </div>

                </div>

            </div>

        </div>
    </div>


    <script src="~/Scripts/jquery-1.9.1.min.js"></script>
    <script src="~/Scripts/bootstrap.min.js"></script>
    <script src="~/Scripts/jquery.validate.js"></script>
    <script src="~/Scripts/jquery.validate.unobtrusive.js"></script>

    <!-- script made for highlight not valid input field -->
    <script>
        (function ($) {
            var defaultOptions = {
                validClass: '',
                errorClass: 'has-error',
                highlight: function (element, errorClass, validClass) {
                    $(element).closest(".form-group")
                        .removeClass(validClass)
                        .addClass('has-error');
                },
                unhighlight: function (element, errorClass, validClass) {
                    $(element).closest(".form-group")
                    .removeClass('has-error')
                    .addClass(validClass);
                }
            };

            $.validator.setDefaults(defaultOptions);

            $.validator.unobtrusive.options = {
                errorClass: defaultOptions.errorClass,
                validClass: defaultOptions.validClass,
            };
        })(jQuery);
    </script>
    <!-- end script -->

</body>
</html>
