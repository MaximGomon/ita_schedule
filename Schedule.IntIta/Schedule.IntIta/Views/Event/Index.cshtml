@using Schedule.IntIta.Domain.Models
@model IEnumerable<Schedule.IntIta.ViewModels.EventViewModel>

@{
    ViewData["Title"] = "Events";
    
}

<h2>Events</h2>

<p>
    <a asp-action="Create">Create New</a>
</p>
         
<table class="table-responsive table-striped table-bordered table-hover ">
    <thead>
    <script type="text/javascript">
        $(document).ready(function() {
            //read filters setting from ViewData and fill accordant field
        });
        function DoSort() {
            $.ajax({
                type: "POST",
                url: @Url.Action("Filter", "Event"),
                contentType: "application/json; charset=utf-8",
                data: json.stringify([
                    {
                        SearchString: $('#sType').val(),
                        EventField: 'TypeOfEvent'
                    },
                    {
                        SearchString: $('#sInitiator').val(),
                        EventField: 'InitiatorName'
                    },
                    {
                        SearchString: $('#sRoom').val(),
                        EventField: 'RoomName'
                    },
                    {
                        SearchString: $('#sGroup').val(),
                        EventField: 'GroupName'
                    }
                ]),
                dataType: "json",
                success: function(result) {},
                error: function(result) {}
            });
        }

    </script>
    <tr>
        <th>
            @Html.DisplayNameFor(model => model.Id)
        </th>
        <th>
            <div class="form-actions no-color">
                <p><input type="text" id="sType" value="@ViewData["TypeFilter"]" onclick="DoSort()"/></p>
            </div>
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Date.StartTime)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Date.EndTime)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.SubjectId)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.InitiatorId)
            <div class="form-actions no-color">
                <p><input type="text" id="sInitiator" value="@ViewData["InitiatorFilter"] onclick="DoSort()"/></p>
            </div>
        </th>
        <th>
            @Html.DisplayNameFor(model => model.RoomId)
            <div class="form-actions no-color">
                <p><input type="text" id="sRoom" value="@ViewData["RoomFilter"] onclick="DoSort()"/></p>
            </div>
        </th>
        <th>
            @Html.DisplayNameFor(model => model.GroupId)
            <div class="form-actions no-color">
                <p><input type="text" id="sGroup" value="@ViewData["GroupFilter"] onclick="DoSort()"/></p>
            </div>
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Comments)

        </th>
        <th>
            @Html.DisplayNameFor(model => model.IsDeleted)
        </th>
        <th></th>
    </tr>
    </thead>
    <tbody>
    @foreach (var item in Model) {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.Id)
            </td>
            <th>
                @Html.DisplayFor(modelItem => item.TypeOfEvent.Name)
            </th>
            <th>
                @Html.DisplayFor(modelItem => item.Date.StartTime)
            </th>
            <th>
                @Html.DisplayFor(modelItem => item.Date.EndTime)
            </th>
            <td>
                @Html.DisplayFor(modelItem => item.SubjectName)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.InitiatorName)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.RoomName)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.GroupName)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Comments)
            </td>
            <td>
                @*
            @(item.IsDeleted ? "y" : "n")
        *@
                @Html.DisplayFor(modelItem => item.IsDeleted)
            </td>
            <td>
                @Html.ActionLink("Edit", "Edit", new {id=item.Id}) |
                @Html.ActionLink("Delete", "Delete", new {id=item.Id})
            </td>
        </tr>
    }
    </tbody>
</table>

